from telethon.sync import TelegramClient
import pandas as pd
import time
from telethon.tl.types import ReactionEmoji, ReactionPaid, ReactionCustomEmoji, MessageMediaPhoto
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Alignment
from datetime import datetime
from datetime import datetime, timedelta

# –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
default_end = datetime.now()
default_start = default_end - timedelta(days=7)

# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
start_input = input(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_start.strftime('%Y-%m-%d')}]: ").strip()
start_date = datetime.strptime(start_input, "%Y-%m-%d") if start_input else default_start

# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
end_input = input(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_end.strftime('%Y-%m-%d')}]: ").strip()
end_date = datetime.strptime(end_input, "%Y-%m-%d") if end_input else default_end

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = "25492203"
api_hash = "0f1f1ab020df21383b4699bea789871a"
# channel_username = "ekaterinatolasova"
raw_input = input("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (—Å –∏–ª–∏ –±–µ–∑ @): ").strip()
channel_username = raw_input[1:] if raw_input.startswith("@") else raw_input

# start_date = datetime(2025, 1, 1)
# end_date = datetime(2025, 12, 31, 23, 59, 59)

POSITIVE_EMOJIS = {'üëç', '‚ù§', 'üî•', 'üòä', 'üòÇ', 'ü•∞', 'üëè', '‚ö°', '‚ù§‚Äçüî•', 'ü´°', 'ü§ó', 'üòç', 'üëå', 'üòÅ', 'üíØ', 'üôè', 'ü§©'}
NEGATIVE_EMOJIS = {'ü§°', 'üëé', 'üí©', 'ü•±'}


def process_reactions(reactions):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π."""
    positive = []
    negative = []
    neutral = []
    paid = []
    total = 0

    if reactions:
        for reaction in reactions.results:
            if isinstance(reaction.reaction, ReactionEmoji):
                emoticon = reaction.reaction.emoticon
                if emoticon in POSITIVE_EMOJIS:
                    positive.append(f"{emoticon} {reaction.count}")
                elif emoticon in NEGATIVE_EMOJIS:
                    negative.append(f"{emoticon} {reaction.count}")
                else:
                    neutral.append(f"{emoticon} {reaction.count}")
            elif isinstance(reaction.reaction, ReactionPaid):
                paid.append(f"{reaction.count}")
            elif isinstance(reaction.reaction, ReactionCustomEmoji):
                neutral.append(f"? {reaction.count}")
        total = sum(reaction.count for reaction in reactions.results)

    return positive, negative, neutral, paid, total


def calculate_engagement_rate(views, reactions, comments, forwards, paid_reactions):
    """–í—ã—á–∏—Å–ª—è–µ—Ç Engagement Rate (ER%) —Å —É—á—ë—Ç–æ–º –ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π."""
    if views > 0:
        total_engagement = reactions + comments + forwards + paid_reactions
        return round(total_engagement / views * 100, 2)
    return 0


def save_to_excel(df, filename, channel_username, start_date, end_date):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Excel-—Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ¬ª –∏ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    summary_row = df[df['–î–∞—Ç–∞'] == '–ò—Ç–æ–≥–æ']
    average_row = df[df['–î–∞—Ç–∞'] == '–°—Ä–µ–¥–Ω–µ–µ']
    df = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–°—Ä–µ–¥–Ω–µ–µ'])]  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ¬ª –∏ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DataFrame
    df = pd.concat([summary_row, average_row, df], ignore_index=True)  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞—á–∞–ª–æ

    df.to_excel(filename, index=False)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
    wb = load_workbook(filename)
    ws = wb.active

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –Ω–∞—á–∞–ª–æ
    info_text = f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username} (https://t.me/{channel_username}) –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%Y-%m-%d %H:%M:%S')} –ø–æ {end_date.strftime('%Y-%m-%d %H:%M:%S')}"
    ws.insert_rows(1)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
    ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=len(df.columns))  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏
    ws.cell(row=1, column=1, value=info_text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
    font = Font(bold=True, size=12)  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, —Ä–∞–∑–º–µ—Ä 12
    alignment = Alignment(horizontal="center", vertical="center")  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É

    for cell in ws[1]:  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        cell.fill = fill
        cell.font = font
        cell.alignment = alignment

    # –ó–∞–¥–∞—ë–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    column_widths = {
        'A': 10,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ A (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–∏–ø")
        'B': 20,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ B (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–∞—Ç–∞")
        'C': 30,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ C (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–µ–∫—Å—Ç")
        'D': 8,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ D (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–ª–∏–Ω–∞")
        'E': 15,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ E (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°—Å—ã–ª–∫–∞")
        'F': 13,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ F (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
        'G': 11,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ G (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ–∞–∫—Ü–∏–∏")
        'H': 17,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ H (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ")
        'I': 11,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ I (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—Å–µ–≥–æ (+)")
        'J': 17,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ J (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ")
        'K': 11,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ K (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—Å–µ–≥–æ (-)")
        'L': 20,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ L (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ")
        'M': 11,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ M (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—Å–µ–≥–æ")
        'N': 13,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ N (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–ª–∞—Ç–Ω—ã–µ")
        'O': 14,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ O (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–æ–º–º–µ–Ω—Ç—ã")
        'P': 15,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ P (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–µ—Ä–µ—Å—ã–ª–∫–∏")
        'Q': 7,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ Q (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ER%")
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    for col, width in column_widths.items():
        ws.column_dimensions[col].width = width

    # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    header_fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    for cell in ws[2]:  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π)
        cell.fill = header_fill

    # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    summary_fill = PatternFill(start_color="66FF66", end_color="66FF66", fill_type="solid")  # –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
    average_fill = PatternFill(start_color="66FF66", end_color="66FF66", fill_type="solid")  # –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–∞ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ)
    for cell in ws[3]:  # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
        cell.fill = summary_fill

    # –°—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–∞ —á–µ—Ç–≤—ë—Ä—Ç–æ–π —Å—Ç—Ä–æ–∫–µ)
    for cell in ws[4]:  # –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        cell.fill = average_fill

    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Ç–æ–≥, —Å—Ä–µ–¥–Ω–µ–µ)
    ws.freeze_panes = 'A5'  # –¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –∏—Ç–æ–≥–æ–º –∏ —Å—Ä–µ–¥–Ω–∏–º

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É
    wb.save(filename)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    with TelegramClient('session_name', api_id, api_hash) as client:
        messages = []
        albums = {}

        for message in client.iter_messages(channel_username):
            message_date_naive = message.date.replace(tzinfo=None)

            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            if message_date_naive < start_date:
                break
            if message_date_naive > end_date:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤
            grouped_id = getattr(message, 'grouped_id', None)
            if grouped_id:
                if grouped_id not in albums:
                    albums[grouped_id] = []
                albums[grouped_id].append(message)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                post_type = '–û–ø—Ä–æ—Å' if message.poll else '–¢–µ–∫—Å—Ç' if message.text else '–§–æ—Ç–æ' if isinstance(
                    message.media, MessageMediaPhoto) else '–î—Ä—É–≥–æ–µ'
                message_link = f"https://t.me/{channel_username}/{message.id}" if channel_username else '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'

                positive, negative, neutral, paid, total_reactions = process_reactions(message.reactions)
                views = message.views if message.views else 0
                comments = message.replies.replies if message.replies else 0
                forwards = message.forwards if message.forwards else 0

                # –ü–æ–¥—Å—á—ë—Ç –ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
                paid_reactions = sum(int(p) for p in paid)
                er_percentage = calculate_engagement_rate(views, total_reactions, comments, forwards, paid_reactions)

                messages.append({
                    '–¢–∏–ø': post_type,
                    '–î–∞—Ç–∞': message_date_naive,
                    '–¢–µ–∫—Å—Ç': message.text or '',
                    '–î–ª–∏–Ω–∞': len(message.text or ''),
                    '–°—Å—ã–ª–∫–∞': message_link,
                    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': views,
                    '–†–µ–∞–∫—Ü–∏–∏': total_reactions,
                    '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': ' '.join(positive),
                    '–í—Å–µ–≥–æ (+)': sum(int(r.split(' ')[1]) for r in positive),
                    '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': ' '.join(negative),
                    '–í—Å–µ–≥–æ (-)': sum(int(r.split(' ')[1]) for r in negative),
                    '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ': ' '.join(neutral),
                    '–í—Å–µ–≥–æ': sum(int(r.split(' ')[1]) for r in neutral),
                    '–ü–ª–∞—Ç–Ω—ã–µ': ' '.join(paid),
                    '–ö–æ–º–º–µ–Ω—Ç—ã': comments,
                    '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': forwards,
                    'ER%': er_percentage
                })

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
            time.sleep(0.1)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤
        for grouped_id, album_messages in albums.items():
            first_message = album_messages[0]
            views = first_message.views if first_message.views else 0

            # –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–ª—å–±–æ–º–µ
            positive = []
            negative = []
            neutral = []
            paid = []
            total_reactions = 0
            paid_reactions_total = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ –∞–ª—å–±–æ–º–µ

            for message in album_messages:
                p, n, neu, p_paid, total = process_reactions(message.reactions)
                positive.extend(p)
                negative.extend(n)
                neutral.extend(neu)
                paid.extend(p_paid)
                total_reactions += total
                paid_reactions_total += sum(int(p) for p in p_paid)  # –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏

            comments = sum(m.replies.replies if m.replies else 0 for m in album_messages)
            forwards = sum(m.forwards if m.forwards else 0 for m in album_messages)
            er_percentage = calculate_engagement_rate(views, total_reactions, comments, forwards, paid_reactions_total)

            messages.append({
                '–¢–∏–ø': '–ê–ª—å–±–æ–º',
                '–î–∞—Ç–∞': first_message.date.replace(tzinfo=None),
                '–¢–µ–∫—Å—Ç': ' '.join(m.text or '' for m in album_messages),
                '–î–ª–∏–Ω–∞': sum(len(m.text or '') for m in album_messages),
                '–°—Å—ã–ª–∫–∞': f"https://t.me/{channel_username}/{first_message.id}" if channel_username else '–ù–µ—Ç —Å—Å—ã–ª–∫–∏',
                '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': views,
                '–†–µ–∞–∫—Ü–∏–∏': total_reactions,
                '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': ' '.join(positive),
                '–í—Å–µ–≥–æ (+)': sum(int(r.split(' ')[1]) for r in positive),
                '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': ' '.join(negative),
                '–í—Å–µ–≥–æ (-)': sum(int(r.split(' ')[1]) for r in negative),
                '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ': ' '.join(neutral),
                '–í—Å–µ–≥–æ': sum(int(r.split(' ')[1]) for r in neutral),
                '–ü–ª–∞—Ç–Ω—ã–µ': ' '.join(paid),
                '–ö–æ–º–º–µ–Ω—Ç—ã': comments,
                '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': forwards,
                'ER%': er_percentage
            })

        # –°–æ–∑–¥–∞—ë–º DataFrame
        df = pd.DataFrame(messages)
        df = df.sort_values(by='–î–∞—Ç–∞', ascending=False).reset_index(drop=True)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        numeric_columns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–†–µ–∞–∫—Ü–∏–∏', '–í—Å–µ–≥–æ (+)', '–í—Å–µ–≥–æ (-)', '–í—Å–µ–≥–æ', '–ü–ª–∞—Ç–Ω—ã–µ', '–ö–æ–º–º–µ–Ω—Ç—ã',
                           '–ü–µ—Ä–µ—Å—ã–ª–∫–∏', 'ER%']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        # –ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        summary = {
            '–¢–∏–ø': '',  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ ¬´–¢–∏–ø¬ª
            '–î–∞—Ç–∞': '–ò—Ç–æ–≥–æ',
            '–¢–µ–∫—Å—Ç': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {len(df)}',  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            '–î–ª–∏–Ω–∞': df['–î–ª–∏–Ω–∞'].sum(),
            '–°—Å—ã–ª–∫–∞': '',
            '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].sum(),
            '–†–µ–∞–∫—Ü–∏–∏': df['–†–µ–∞–∫—Ü–∏–∏'].sum(),
            '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ (+)': df['–í—Å–µ–≥–æ (+)'].sum(),
            '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ (-)': df['–í—Å–µ–≥–æ (-)'].sum(),
            '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ': df['–í—Å–µ–≥–æ'].sum(),
            '–ü–ª–∞—Ç–Ω—ã–µ': df['–ü–ª–∞—Ç–Ω—ã–µ'].sum(),
            '–ö–æ–º–º–µ–Ω—Ç—ã': df['–ö–æ–º–º–µ–Ω—Ç—ã'].sum(),
            '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': df['–ü–µ—Ä–µ—Å—ã–ª–∫–∏'].sum(),
            'ER%': ''
        }

        # –ü–æ–¥—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        average = {
            '–¢–∏–ø': '',  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ ¬´–¢–∏–ø¬ª
            '–î–∞—Ç–∞': '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç',
            '–¢–µ–∫—Å—Ç': '',
            '–î–ª–∏–Ω–∞': round(df[df['–î–ª–∏–Ω–∞'] > 0]['–î–ª–∏–Ω–∞'].mean(), 2),
            '–°—Å—ã–ª–∫–∞': '',
            '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': round(df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].mean(), 2),
            '–†–µ–∞–∫—Ü–∏–∏': round(df['–†–µ–∞–∫—Ü–∏–∏'].mean(), 2),
            '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ (+)': round(df['–í—Å–µ–≥–æ (+)'].mean(), 2),
            '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ (-)': round(df['–í—Å–µ–≥–æ (-)'].mean(), 2),
            '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ': '',
            '–í—Å–µ–≥–æ': round(df['–í—Å–µ–≥–æ'].mean(), 2),
            '–ü–ª–∞—Ç–Ω—ã–µ': round(df['–ü–ª–∞—Ç–Ω—ã–µ'].mean(), 2),
            '–ö–æ–º–º–µ–Ω—Ç—ã': round(df['–ö–æ–º–º–µ–Ω—Ç—ã'].mean(), 2),
            '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': round(df['–ü–µ—Ä–µ—Å—ã–ª–∫–∏'].mean(), 2),
            'ER%': round(df['ER%'].mean(), 2)
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DataFrame
        columns_order = df.columns

        # –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è ¬´–ò—Ç–æ–≥–æ¬ª –∏ ¬´–°—Ä–µ–¥–Ω–µ–µ¬ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        summary_df = pd.DataFrame([summary], columns=columns_order)
        average_df = pd.DataFrame([average], columns=columns_order)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ DataFrame
        df = pd.concat([summary_df, average_df, df], ignore_index=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        filename = f"{channel_username}_{start_date.strftime('%Y-%m-%d')}-{end_date.strftime('%Y-%m-%d')}.xlsx"
        save_to_excel(df, filename, channel_username, start_date, end_date)

        # save_to_excel(df, 'lpr.xlsx', channel_username, start_date, end_date)


if __name__ == "__main__":
    main()
